{"ast":null,"code":"import { LayoutColor, LayoutType, LayoutWidth, SideBarTheme, SideBarWidth } from \"../models/layout.model\";\n/**\n * finds all parents of selected menuitem\n * @param menuItems list of menus\n * @param menuItem selected menu\n * @returns list of all parent menus of menuitem\n */\nconst findAllParent = (menuItems, menuItem) => {\n  let parents = [];\n  const parent = findMenuItem(menuItems, menuItem['parentKey']);\n  if (parent) {\n    parents.push(parent['key']);\n    if (parent['parentKey']) parents = [...parents, ...findAllParent(menuItems, parent)];\n  }\n  return parents;\n};\n/**\n * finds menuitem\n * @param menuItems list of menus\n * @param menuItemKey key to be matched\n * @returns menuitem that has menuItemKey\n */\nconst findMenuItem = (menuItems, menuItemKey) => {\n  if (menuItems && menuItemKey) {\n    for (var i = 0; i < menuItems.length; i++) {\n      if (menuItems[i].key === menuItemKey) {\n        return menuItems[i];\n      }\n      var found = findMenuItem(menuItems[i].children, menuItemKey);\n      if (found) return found;\n    }\n  }\n  return null;\n};\n/**\n * returns configurations based on layout type\n * @param layoutType layout type\n */\nconst getLayoutConfig = (layoutType = LayoutType.LAYOUT_VERTICAL) => {\n  let config = {\n    layoutColor: LayoutColor.LAYOUT_COLOR_LIGHT,\n    layoutWidth: LayoutWidth.LAYOUT_WIDTH_FLUID,\n    leftbarTheme: SideBarTheme.SIDEBAR_THEME_DARK,\n    leftbarWidth: SideBarWidth.SIDEBAR_WIDTH_FIXED\n  };\n  return config;\n};\nexport { findAllParent, findMenuItem, getLayoutConfig };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}