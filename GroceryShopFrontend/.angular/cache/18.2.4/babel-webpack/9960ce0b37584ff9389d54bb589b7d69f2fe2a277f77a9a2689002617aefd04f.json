{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\n/**\n * @returns registered user list\n */\nfunction getUsers() {\n  // array in session storage for registered users\n  let users = JSON.parse(sessionStorage.getItem('users')) || [{\n    id: 1,\n    username: 'test',\n    email: 'hyper@coderthemes.com',\n    password: 'test',\n    firstName: 'Dominic',\n    lastName: 'Keller',\n    avatar: 'assets/images/users/avatar-1.jpg',\n    location: 'California, USA',\n    title: 'Founder'\n  }];\n  return users;\n}\nlet users = getUsers();\nexport class FakeBackendInterceptor {\n  intercept(request, next) {\n    const authHeader = request.headers.get('Authorization');\n    const isLoggedIn = authHeader && authHeader.startsWith('Bearer fake-jwt-token');\n    // wrap in delayed observable to simulate server api call\n    return of(null).pipe(mergeMap(() => {\n      let temp = [];\n      // authenticate - public\n      if (request.url.endsWith('/api/login') && request.method === 'POST') {\n        const user = users.find(x => x.email === request.body.email && x.password === request.body.password);\n        if (!user) {\n          return error('Email or password is incorrect');\n        }\n        return ok({\n          ...user,\n          name: user.firstName + ' ' + user.lastName,\n          token: `fake-jwt-token`\n        });\n      }\n      // store new user - public\n      if (request.url.endsWith('/api/signup') && request.method === 'POST') {\n        const user = users.find(x => x.email === request.body.email && x.password === request.body.password);\n        if (user) {\n          return error('User Already Exists');\n        } else {\n          let [firstName, lastName] = request.body.name.split(' ');\n          const newUser = {\n            id: users.length + 1,\n            username: firstName,\n            email: request.body.email,\n            password: request.body.password,\n            firstName: firstName,\n            lastName: lastName,\n            avatar: 'assets/images/users/avatar-5.jpg',\n            location: 'California, USA',\n            title: 'Admin'\n          };\n          temp = [...users];\n          temp.push(newUser);\n          [...users] = temp;\n          sessionStorage.setItem('users', JSON.stringify(users));\n          return ok();\n        }\n      }\n      // get all users\n      if (request.url.endsWith('/api/users') && request.method === 'GET') {\n        if (!isLoggedIn) {\n          return unauthorised();\n        }\n        return ok(users);\n      }\n      // pass through any requests not handled above\n      return next.handle(request);\n    })).pipe(materialize()).pipe(delay(500)).pipe(dematerialize());\n    // private helper functions\n    function ok(body) {\n      return of(new HttpResponse({\n        status: 200,\n        body\n      }));\n    }\n    function unauthorised() {\n      return throwError({\n        status: 401,\n        error: {\n          message: 'Unauthorised'\n        }\n      });\n    }\n    function error(message) {\n      return throwError({\n        status: 400,\n        error: {\n          message\n        }\n      });\n    }\n  }\n  static #_ = this.ɵfac = function FakeBackendInterceptor_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FakeBackendInterceptor)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n}\nexport let FakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}