{"ast":null,"code":"import { environment } from 'src/environments/environment.prod';\n// type\nimport { LayoutEventType } from '../../core/constants/events';\n// layout constants\nimport { LayoutType, LayoutWidth, SideBarWidth } from '../shared/models/layout.model';\n// utility function\nimport { getLayoutConfig } from '../shared/helper/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/service/event.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../shared/right-side-bar/right-side-bar.component\";\nimport * as i4 from \"../vertical/layout/layout.component\";\nimport * as i5 from \"../horizontal/layout/layout.component\";\nimport * as i6 from \"../detached/layout/layout.component\";\nimport * as i7 from \"../full/layout/layout.component\";\nfunction PrivateLayoutComponent_app_vertical_layout_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-vertical-layout\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"layoutWidth\", ctx_r0.layoutWidth)(\"sidebarTheme\", ctx_r0.leftSidebarTheme)(\"sidebarType\", ctx_r0.leftSidebarWidth)(\"layoutColor\", ctx_r0.layoutColor);\n  }\n}\nfunction PrivateLayoutComponent_app_horizontal_layout_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-horizontal-layout\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"layoutWidth\", ctx_r0.layoutWidth)(\"configuredDemo\", ctx_r0.configuredDemo)(\"layoutColor\", ctx_r0.layoutColor);\n  }\n}\nfunction PrivateLayoutComponent_app_detached_layout_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-detached-layout\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"sidebarType\", ctx_r0.leftSidebarWidth)(\"layoutColor\", ctx_r0.layoutColor);\n  }\n}\nfunction PrivateLayoutComponent_app_full_layout_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-full-layout\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"sidebarTheme\", ctx_r0.leftSidebarTheme)(\"sidebarType\", ctx_r0.leftSidebarWidth)(\"layoutColor\", ctx_r0.layoutColor);\n  }\n}\nexport class PrivateLayoutComponent {\n  constructor(eventService) {\n    this.eventService = eventService;\n  }\n  ngOnInit() {\n    // default settings\n    this.configuredDemo = environment.demo;\n    // tslint:disable-next-line: max-line-length\n    this.layoutType = this.configuredDemo === 'creative' ? LayoutType.LAYOUT_HORIZONTAL : this.configuredDemo === 'modern' ? LayoutType.LAYOUT_DETACHED : LayoutType.LAYOUT_VERTICAL;\n    let config = getLayoutConfig(this.layoutType);\n    this.layoutWidth = config.layoutWidth;\n    this.leftSidebarTheme = config.leftbarTheme;\n    this.leftSidebarWidth = config.leftbarWidth;\n    this.layoutColor = config.layoutColor;\n    // listen to event and change the layout, theme, etc\n    this.eventService.subscribe(LayoutEventType.CHANGE_LAYOUT, layout => {\n      this.layoutType = layout;\n    });\n    this.eventService.subscribe(LayoutEventType.CHANGE_LAYOUT_COLOR, color => {\n      this.layoutColor = color;\n    });\n    this.eventService.subscribe(LayoutEventType.CHANGE_LAYOUT_WIDTH, width => {\n      setTimeout(() => {\n        this.layoutWidth = width;\n        if (this.layoutWidth === LayoutWidth.LAYOUT_WIDTH_BOXED) {\n          this.eventService.broadcast(LayoutEventType.CHANGE_LEFT_SIDEBAR_TYPE, SideBarWidth.SIDEBAR_WIDTH_CONDENSED);\n        } else {\n          this.eventService.broadcast(LayoutEventType.CHANGE_LEFT_SIDEBAR_TYPE, SideBarWidth.SIDEBAR_WIDTH_FIXED);\n        }\n      }, 20);\n    });\n    this.eventService.subscribe(LayoutEventType.CHANGE_LEFT_SIDEBAR_THEME, theme => {\n      this.leftSidebarTheme = theme;\n    });\n    this.eventService.subscribe(LayoutEventType.CHANGE_LEFT_SIDEBAR_TYPE, type => {\n      this.leftSidebarWidth = type;\n    });\n    this.updateDimensions();\n    // window.addEventListener('resize', this.updateDimensions);\n  }\n  ngAfterViewInit() {\n    document.body.classList.remove('authentication-bg');\n  }\n  /**\n   * changes left sidebar type based on screen dimensions\n   */\n  updateDimensions() {\n    if (window.innerWidth >= 768 && window.innerWidth <= 1028) {\n      this.eventService.broadcast(LayoutEventType.CHANGE_LEFT_SIDEBAR_TYPE, SideBarWidth.SIDEBAR_WIDTH_CONDENSED);\n    } else if (window.innerWidth > 1028) {\n      this.eventService.broadcast(LayoutEventType.CHANGE_LEFT_SIDEBAR_TYPE, SideBarWidth.SIDEBAR_WIDTH_FIXED);\n    }\n  }\n  /**\n   * Check if the vertical layout is requested\n   */\n  isVerticalLayoutRequested() {\n    return this.layoutType === LayoutType.LAYOUT_VERTICAL;\n  }\n  /**\n   * Check if the horizontal layout is requested\n   */\n  isHorizontalLayoutRequested() {\n    return this.layoutType === LayoutType.LAYOUT_HORIZONTAL;\n  }\n  /**\n   * Check if the detached layout is requested\n   */\n  isDetachedLayoutRequested() {\n    return this.layoutType === LayoutType.LAYOUT_DETACHED;\n  }\n  /**\n   * Check if full layout is requested\n   */\n  isFullLayoutRequested() {\n    return this.layoutType === LayoutType.LAYOUT_FULL;\n  }\n  static #_ = this.ɵfac = function PrivateLayoutComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PrivateLayoutComponent)(i0.ɵɵdirectiveInject(i1.EventService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PrivateLayoutComponent,\n    selectors: [[\"app-private-layout\"]],\n    decls: 5,\n    vars: 9,\n    consts: [[3, \"layoutWidth\", \"sidebarTheme\", \"sidebarType\", \"layoutColor\", 4, \"ngIf\"], [3, \"layoutWidth\", \"configuredDemo\", \"layoutColor\", 4, \"ngIf\"], [3, \"sidebarType\", \"layoutColor\", 4, \"ngIf\"], [3, \"sidebarTheme\", \"sidebarType\", \"layoutColor\", 4, \"ngIf\"], [3, \"layoutType\", \"layoutColor\", \"layoutWidth\", \"leftSidebarTheme\", \"leftSidebarWidth\"], [3, \"layoutWidth\", \"sidebarTheme\", \"sidebarType\", \"layoutColor\"], [3, \"layoutWidth\", \"configuredDemo\", \"layoutColor\"], [3, \"sidebarType\", \"layoutColor\"], [3, \"sidebarTheme\", \"sidebarType\", \"layoutColor\"]],\n    template: function PrivateLayoutComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, PrivateLayoutComponent_app_vertical_layout_0_Template, 1, 4, \"app-vertical-layout\", 0)(1, PrivateLayoutComponent_app_horizontal_layout_1_Template, 1, 3, \"app-horizontal-layout\", 1)(2, PrivateLayoutComponent_app_detached_layout_2_Template, 1, 2, \"app-detached-layout\", 2)(3, PrivateLayoutComponent_app_full_layout_3_Template, 1, 3, \"app-full-layout\", 3);\n        i0.ɵɵelement(4, \"app-right-side-bar\", 4);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isVerticalLayoutRequested());\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.isHorizontalLayoutRequested());\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.isDetachedLayoutRequested());\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.isFullLayoutRequested());\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"layoutType\", ctx.layoutType)(\"layoutColor\", ctx.layoutColor)(\"layoutWidth\", ctx.layoutWidth)(\"leftSidebarTheme\", ctx.leftSidebarTheme)(\"leftSidebarWidth\", ctx.leftSidebarWidth);\n      }\n    },\n    dependencies: [i2.NgIf, i3.RightSideBarComponent, i4.LayoutComponent, i5.LayoutComponent, i6.LayoutComponent, i7.LayoutComponent]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}