{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { environment } from 'src/environments/environment.prod';\n// type\nimport { LayoutEventType } from '../../core/constants/events';\n// layout constants\nimport { LayoutType, LayoutWidth, SideBarWidth } from '../shared/models/layout.model';\n// utility function\nimport { getLayoutConfig } from '../shared/helper/utils';\nlet PrivateLayoutComponent = class PrivateLayoutComponent {\n  constructor(eventService) {\n    this.eventService = eventService;\n  }\n  ngOnInit() {\n    // default settings\n    this.configuredDemo = environment.demo;\n    // tslint:disable-next-line: max-line-length\n    this.layoutType = this.configuredDemo === 'creative' ? LayoutType.LAYOUT_HORIZONTAL : this.configuredDemo === 'modern' ? LayoutType.LAYOUT_DETACHED : LayoutType.LAYOUT_VERTICAL;\n    let config = getLayoutConfig(this.layoutType);\n    this.layoutWidth = config.layoutWidth;\n    this.leftSidebarTheme = config.leftbarTheme;\n    this.leftSidebarWidth = config.leftbarWidth;\n    this.layoutColor = config.layoutColor;\n    // listen to event and change the layout, theme, etc\n    this.eventService.subscribe(LayoutEventType.CHANGE_LAYOUT, layout => {\n      this.layoutType = layout;\n    });\n    this.eventService.subscribe(LayoutEventType.CHANGE_LAYOUT_COLOR, color => {\n      this.layoutColor = color;\n    });\n    this.eventService.subscribe(LayoutEventType.CHANGE_LAYOUT_WIDTH, width => {\n      setTimeout(() => {\n        this.layoutWidth = width;\n        if (this.layoutWidth === LayoutWidth.LAYOUT_WIDTH_BOXED) {\n          this.eventService.broadcast(LayoutEventType.CHANGE_LEFT_SIDEBAR_TYPE, SideBarWidth.SIDEBAR_WIDTH_CONDENSED);\n        } else {\n          this.eventService.broadcast(LayoutEventType.CHANGE_LEFT_SIDEBAR_TYPE, SideBarWidth.SIDEBAR_WIDTH_FIXED);\n        }\n      }, 20);\n    });\n    this.eventService.subscribe(LayoutEventType.CHANGE_LEFT_SIDEBAR_THEME, theme => {\n      this.leftSidebarTheme = theme;\n    });\n    this.eventService.subscribe(LayoutEventType.CHANGE_LEFT_SIDEBAR_TYPE, type => {\n      this.leftSidebarWidth = type;\n    });\n    this.updateDimensions();\n    // window.addEventListener('resize', this.updateDimensions);\n  }\n  ngAfterViewInit() {\n    document.body.classList.remove('authentication-bg');\n  }\n  /**\n   * changes left sidebar type based on screen dimensions\n   */\n  updateDimensions() {\n    if (window.innerWidth >= 768 && window.innerWidth <= 1028) {\n      this.eventService.broadcast(LayoutEventType.CHANGE_LEFT_SIDEBAR_TYPE, SideBarWidth.SIDEBAR_WIDTH_CONDENSED);\n    } else if (window.innerWidth > 1028) {\n      this.eventService.broadcast(LayoutEventType.CHANGE_LEFT_SIDEBAR_TYPE, SideBarWidth.SIDEBAR_WIDTH_FIXED);\n    }\n  }\n  /**\n   * Check if the vertical layout is requested\n   */\n  isVerticalLayoutRequested() {\n    return this.layoutType === LayoutType.LAYOUT_VERTICAL;\n  }\n  /**\n   * Check if the horizontal layout is requested\n   */\n  isHorizontalLayoutRequested() {\n    return this.layoutType === LayoutType.LAYOUT_HORIZONTAL;\n  }\n  /**\n   * Check if the detached layout is requested\n   */\n  isDetachedLayoutRequested() {\n    return this.layoutType === LayoutType.LAYOUT_DETACHED;\n  }\n  /**\n   * Check if full layout is requested\n   */\n  isFullLayoutRequested() {\n    return this.layoutType === LayoutType.LAYOUT_FULL;\n  }\n};\nPrivateLayoutComponent = __decorate([Component({\n  selector: 'app-private-layout',\n  templateUrl: './private-layout.component.html',\n  styleUrls: ['./private-layout.component.scss']\n})], PrivateLayoutComponent);\nexport { PrivateLayoutComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}