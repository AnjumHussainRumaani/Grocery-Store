{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet ProductComponent = class ProductComponent {\n  constructor(modalService, fb, http) {\n    this.modalService = modalService;\n    this.fb = fb;\n    this.http = http;\n    this.isEditMode = false;\n    this.productData = [];\n    this.aisleList = [];\n    this.selectedProduct = null;\n    // Base URL for API endpoints\n    this.baseUrl = 'http://localhost:5100/api';\n  }\n  ngOnInit() {\n    this._fetchProductData();\n    this._fetchAisleData();\n    this.productForm = this.fb.group({\n      name: ['', Validators.required],\n      price: [0, Validators.required],\n      quantity: [0, Validators.required],\n      expiryDate: ['', Validators.required],\n      purchaseDate: ['', Validators.required],\n      aisleId: ['', Validators.required]\n    });\n  }\n  // Fetch product data using GET API\n  _fetchProductData() {\n    this.http.get(`${this.baseUrl}/products`).subscribe(data => {\n      this.productData = data;\n    });\n  }\n  // Fetch aisle data using GET API\n  _fetchAisleData() {\n    this.http.get(`${this.baseUrl}/aisles`).subscribe(data => {\n      this.aisleList = data;\n    });\n  }\n  // Open the modal to add a new product\n  openAddProductModal(content) {\n    this.isEditMode = false;\n    this.modalTitle = \"Add Product\";\n    this.productForm.reset();\n    this.modalService.open(content);\n  }\n  // Open the modal to edit an existing product\n  openEditProductModal(product, content) {\n    this.isEditMode = true;\n    this.modalTitle = \"Edit Product\";\n    this.selectedProduct = product;\n    this.productForm.patchValue(product);\n    this.modalService.open(content);\n  }\n  // Submit product form (POST for new product, PUT for update)\n  submitProduct() {\n    if (this.isEditMode && this.selectedProduct) {\n      this.updateProduct(this.selectedProduct.id);\n    } else {\n      this.addProduct();\n    }\n  }\n  // Add new product using POST API\n  addProduct() {\n    const newProduct = this.productForm.value;\n    this.http.post(`${this.baseUrl}/products`, newProduct).subscribe(addedProduct => {\n      this.productData.push(addedProduct);\n      this.modalService.dismissAll();\n    });\n  }\n  // Update existing product using PUT API\n  updateProduct(productId) {\n    const updatedProduct = this.productForm.value;\n    this.http.put(`${this.baseUrl}/products/${productId}`, updatedProduct).subscribe(updatedData => {\n      const index = this.productData.findIndex(p => p.id === productId);\n      if (index > -1) {\n        this.productData[index] = updatedData;\n      }\n      this.modalService.dismissAll();\n    });\n  }\n  // Delete product using DELETE API\n  removeProduct(product) {\n    this.http.delete(`${this.baseUrl}/products/${product.id}`).subscribe(() => {\n      const index = this.productData.indexOf(product);\n      if (index > -1) {\n        this.productData.splice(index, 1);\n      }\n    });\n  }\n  // Fetch expiring soon products\n  fetchExpiringSoonProducts() {\n    this.http.get(`${this.baseUrl}/products/expiring-soon`).subscribe(data => {\n      console.log('Expiring soon products:', data);\n    });\n  }\n};\nProductComponent = __decorate([Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.scss']\n})], ProductComponent);\nexport { ProductComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}