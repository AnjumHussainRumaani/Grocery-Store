{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet BasicComponent = class BasicComponent {\n  constructor(modalService, fb, http // Inject HttpClient here\n  ) {\n    this.modalService = modalService;\n    this.fb = fb;\n    this.http = http;\n    this.isEditMode = false;\n    this.aisleData = [];\n    this.productsInAisle = [];\n    this.selectedAisle = null;\n    this.API_URL = 'http://localhost:5100/api'; // Base URL for your API\n  }\n  ngOnInit() {\n    this.signupForm = this.fb.group({\n      name: ['', Validators.required]\n    });\n    // Fetch aisles and products on initialization\n    this.fetchAisles();\n    this.fetchProducts();\n  }\n  /**\n   * Fetches aisles from the API\n   */\n  fetchAisles() {\n    this.http.get(`${this.API_URL}/aisles`).subscribe(data => {\n      this.aisleData = data;\n    });\n  }\n  /**\n   * Fetches all products from the API\n   */\n  fetchProducts() {\n    this.http.get(`${this.API_URL}/products`).subscribe(data => {\n      this.productData = data;\n    });\n  }\n  /**\n   * Fetch products for a specific aisle\n   * @param aisleId The id of the aisle to filter products for\n   */\n  getProductsForAisle(aisleId) {\n    this.http.get(`${this.API_URL}/aisles/${aisleId}/products`).subscribe(data => {\n      this.productsInAisle = data;\n      this.openProductListModal();\n    });\n  }\n  /**\n   * Opens the modal for adding an aisle\n   */\n  openAddAisleModal(content) {\n    this.isEditMode = false;\n    this.modalTitle = \"Add Aisle\";\n    this.signupForm.reset(); // Reset the form for a new entry\n    this.modalService.open(content);\n  }\n  /**\n   * Opens the modal for editing an aisle\n   * @param aisle The aisle to be edited\n   */\n  openEditAisleModal(aisle, content) {\n    this.isEditMode = true;\n    this.modalTitle = \"Edit Aisle\";\n    this.selectedAisle = aisle;\n    this.signupForm.patchValue({\n      name: aisle.name\n    });\n    this.modalService.open(content);\n  }\n  /**\n   * Submit the form for either adding or updating an aisle\n   */\n  submitAisle() {\n    if (this.isEditMode && this.selectedAisle) {\n      // Update the existing aisle\n      this.http.put(`${this.API_URL}/aisles/${this.selectedAisle.id}`, {\n        name: this.signupForm.value.name\n      }).subscribe(() => {\n        this.fetchAisles();\n        this.modalService.dismissAll();\n      });\n    } else {\n      // Add a new aisle\n      this.http.post(`${this.API_URL}/aisles`, {\n        name: this.signupForm.value.name\n      }).subscribe(() => {\n        this.fetchAisles();\n        this.modalService.dismissAll();\n      });\n    }\n  }\n  /**\n   * Removes an aisle\n   * @param aisle The aisle to be removed\n   */\n  removeAisle(aisle) {\n    this.http.delete(`${this.API_URL}/aisles/${aisle.id}`).subscribe(() => {\n      this.fetchAisles(); // Refresh the aisle list after deletion\n    });\n  }\n  /**\n   * Adds a new product to the aisle\n   * @param product The product to be added\n   */\n  addProduct(product) {\n    this.http.post(`${this.API_URL}/products`, product).subscribe(() => {\n      this.fetchProducts(); // Refresh the product list after adding\n    });\n  }\n  /**\n   * Updates an existing product\n   * @param productId The ID of the product to be updated\n   * @param product The updated product details\n   */\n  updateProduct(productId, product) {\n    this.http.put(`${this.API_URL}/products/${productId}`, product).subscribe(() => {\n      this.fetchProducts(); // Refresh the product list after updating\n    });\n  }\n  /**\n   * Deletes a product by ID\n   * @param productId The ID of the product to be deleted\n   */\n  deleteProduct(productId) {\n    this.http.delete(`${this.API_URL}/products/${productId}`).subscribe(() => {\n      this.fetchProducts(); // Refresh the product list after deletion\n    });\n  }\n  /**\n   * Open the modal to display products in the selected aisle\n   */\n  openProductListModal() {\n    const modalRef = this.modalService.open(this.productListModal, {\n      size: 'lg'\n    });\n  }\n  /**\n   * Fetch expiring soon products\n   */\n  fetchExpiringSoonProducts() {\n    this.http.get(`${this.API_URL}/product/expiring-soon`).subscribe(data => {\n      this.productData = data;\n    });\n  }\n};\n__decorate([ViewChild('productListModal')], BasicComponent.prototype, \"productListModal\", void 0);\nBasicComponent = __decorate([Component({\n  selector: 'app-tables-basic',\n  templateUrl: './basic.component.html',\n  styleUrls: ['./basic.component.scss']\n})], BasicComponent);\nexport { BasicComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}